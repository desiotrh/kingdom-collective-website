name: Kingdom Studios App - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18.x"
  EXPO_CLI_VERSION: "latest"

jobs:
  # Test and Quality Checks
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 TypeScript compilation check
        run: npx tsc --noEmit

      - name: 🧹 Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: 🧪 Run tests
        run: npm test
        continue-on-error: true

      - name: 📊 Generate test coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        continue-on-error: true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🛡️ Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Build for Staging
  build-staging:
    name: Build Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📱 Setup Expo CLI
        run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Load staging environment
        run: cp .env.staging .env

      - name: 📱 Login to Expo
        run: expo login -u ${{ secrets.EXPO_USERNAME }} -p ${{ secrets.EXPO_PASSWORD }}

      - name: 🔨 Build staging release
        run: |
          expo build:web
          expo publish --release-channel staging

      - name: 🚀 Deploy to staging
        run: ./deploy.sh staging
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Build for Production
  build-production:
    name: Build Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📱 Setup Expo CLI
        run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Load production environment
        run: cp .env.production .env

      - name: 📱 Login to Expo
        run: expo login -u ${{ secrets.EXPO_USERNAME }} -p ${{ secrets.EXPO_PASSWORD }}

      - name: 🔨 Build production release
        run: |
          expo build:web
          expo build:ios --release-channel production
          expo build:android --release-channel production
          expo publish --release-channel production

      - name: 🚀 Deploy to production
        run: ./deploy.sh production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}

  # iOS App Store Deployment
  deploy-ios:
    name: Deploy to iOS App Store
    runs-on: macos-latest
    needs: build-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🍎 Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: 🔑 Setup iOS certificates
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

      - name: 📱 Setup provisioning profile
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: pro.kingdomcollective.studios
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}

      - name: 🚀 Deploy to App Store
        run: |
          # Build and upload to App Store Connect
          expo build:ios --release-channel production
          # Additional App Store deployment steps would go here

  # Android Play Store Deployment
  deploy-android:
    name: Deploy to Google Play Store
    runs-on: ubuntu-latest
    needs: build-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: 🔑 Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android-keystore.jks

      - name: 🚀 Deploy to Google Play
        run: |
          # Build and upload to Google Play Console
          expo build:android --release-channel production
          # Additional Play Store deployment steps would go here

  # Post-deployment tasks
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [build-production, deploy-ios, deploy-android]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📢 Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          text: "🚀 Kingdom Studios App deployed successfully to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📊 Update monitoring
        run: |
          # Notify monitoring services of new deployment
          curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"version":"${{ github.sha }}","environment":"production"}'

      - name: 🏥 Health check
        run: |
          # Wait for deployment to be available
          sleep 30
          # Check application health
          curl -f https://api.kingdomstudios.app/health
          curl -f https://kingdomstudios.app

  # Failure notification
  notify-failure:
    name: Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [test, security, build-staging, build-production]
    if: failure()

    steps:
      - name: 📢 Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#deployments"
          text: "❌ Kingdom Studios App deployment failed! Check the logs."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
