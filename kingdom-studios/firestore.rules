rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===============================
    // üõ°Ô∏è HELPER FUNCTIONS
    // ===============================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['super_admin', 'team_admin'];
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    function isFounder() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isFounder == true;
    }
    
    function isTeamMember(organizationId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == organizationId;
    }
    
    function hasValidTier(requiredTiers) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.tier in requiredTiers;
    }
    
    // ===============================
    // üìÑ USER DOCUMENTS
    // ===============================
    
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && 
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isSuperAdmin();
    }
    
    match /userProfiles/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // ===============================
    // üí≥ SUBSCRIPTION & BILLING
    // ===============================
    
    match /subscriptions/{subscriptionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isSuperAdmin();
    }
    
    match /tierUsage/{usageId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /paymentMethods/{methodId} {
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /invoices/{invoiceId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if isAdmin();
    }
    
    // ===============================
    // üì¶ PRODUCTS & CONTENT
    // ===============================
    
    match /products/{productId} {
      allow read: if isOwner(resource.data.userId) || 
                     isTeamMember(resource.data.organizationId) ||
                     isAdmin();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /contentPosts/{postId} {
      allow read: if isOwner(resource.data.userId) || 
                     isTeamMember(resource.data.organizationId) ||
                     isAdmin();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /contentDrafts/{draftId} {
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /contentTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // ===============================
    // ü§ñ AI & GENERATION
    // ===============================
    
    match /aiGenerations/{generationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       hasValidTier(['rooted', 'commissioned', 'mantled_pro', 'kingdom_enterprise']);
      allow update: if isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /aiUsageLogs/{logId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if isAuthenticated();
    }
    
    // ===============================
    // üë• COMMUNITY & SOCIAL
    // ===============================
    
    match /communityPosts/{postId} {
      allow read: if isAuthenticated() && 
                     (resource.data.isPublic == true || 
                      isOwner(resource.data.userId) || 
                      isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /prayerRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /testimonials/{testimonialId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // ===============================
    // üìä ANALYTICS & TRACKING
    // ===============================
    
    match /analyticsEvents/{eventId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isSuperAdmin();
    }
    
    match /userSessions/{sessionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin();
    }
    
    match /featureUsage/{usageId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if isAuthenticated();
    }
    
    // ===============================
    // üõ†Ô∏è ADMIN & SUPPORT
    // ===============================
    
    match /adminLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isSuperAdmin();
    }
    
    match /feedback/{feedbackId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isSuperAdmin();
    }
    
    // ===============================
    // üîî NOTIFICATIONS
    // ===============================
    
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      allow create, update: if isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /pushTokens/{tokenId} {
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // ===============================
    // üîó EXTERNAL PLATFORM SYNC
    // ===============================
    
    match /platformConnections/{connectionId} {
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /syncJobs/{jobId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if isAdmin();
    }
    
    // ===============================
    // ü§ù SPONSORSHIPS & PARTNERSHIPS
    // ===============================
    
    match /sponsorshipRequests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isSuperAdmin();
    }
    
    match /partnershipApplications/{applicationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isSuperAdmin();
    }
  }
}
