# ==============================================
# KINGDOM STUDIOS BACKEND - KUBERNETES DEPLOYMENT
# Production-ready deployment with auto-scaling
# ==============================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kingdom-studios-backend
  namespace: production
  labels:
    app: kingdom-studios-backend
    version: v1.0.0
    tier: backend
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: kingdom-studios-backend
  template:
    metadata:
      labels:
        app: kingdom-studios-backend
        version: v1.0.0
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001

      # Service Account
      serviceAccountName: kingdom-studios-backend

      # Init Container for DB Migration
      initContainers:
        - name: db-migration
          image: kingdom-studios/backend:latest
          command: ["npm", "run", "db:migrate"]
          envFrom:
            - secretRef:
                name: kingdom-studios-secrets
            - configMapRef:
                name: kingdom-studios-config
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"

      containers:
        - name: kingdom-studios-backend
          image: kingdom-studios/backend:latest
          imagePullPolicy: Always

          ports:
            - containerPort: 3000
              name: http
              protocol: TCP

          # Environment Variables
          envFrom:
            - secretRef:
                name: kingdom-studios-secrets
            - configMapRef:
                name: kingdom-studios-config

          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3000"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

          # Resource Limits
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
              ephemeral-storage: "1Gi"
            limits:
              memory: "2Gi"
              cpu: "1000m"
              ephemeral-storage: "5Gi"

          # Health Checks
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3

          # Startup Probe
          startupProbe:
            httpGet:
              path: /health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30

          # Volume Mounts
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: tmp
              mountPath: /app/tmp
            - name: ssl-certs
              mountPath: /certs
              readOnly: true

          # Security Context
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

      # Volumes
      volumes:
        - name: logs
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: ssl-certs
          secret:
            secretName: kingdom-studios-tls
            defaultMode: 0400

      # Pod Anti-Affinity for High Availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - kingdom-studios-backend
                topologyKey: kubernetes.io/hostname

      # Tolerations
      tolerations:
        - key: "kingdom-studios.app/backend"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"

      # DNS Policy
      dnsPolicy: ClusterFirst

      # Restart Policy
      restartPolicy: Always

      # Termination Grace Period
      terminationGracePeriodSeconds: 30

---
# ==============================================
# HORIZONTAL POD AUTOSCALER
# ==============================================

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kingdom-studios-backend-hpa
  namespace: production
  labels:
    app: kingdom-studios-backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kingdom-studios-backend
  minReplicas: 3
  maxReplicas: 50
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 4
          periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Min

---
# ==============================================
# VERTICAL POD AUTOSCALER (Optional)
# ==============================================

apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: kingdom-studios-backend-vpa
  namespace: production
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kingdom-studios-backend
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: kingdom-studios-backend
        minAllowed:
          cpu: 100m
          memory: 128Mi
        maxAllowed:
          cpu: 2000m
          memory: 4Gi
        controlledResources: ["cpu", "memory"]
